{"version":3,"sources":["redux/store.ts","constants_types/constants.ts","components/Todo/Todo.tsx","redux/actionCreators.ts","helpers_api.ts","components/TodoList/TodoList.tsx","index.tsx","App.tsx"],"names":["initialState","todos","isLoading","isLoaded","selectedSort","store","createStore","state","action","type","filter","todo","id","mapDispatchToProps","removeTodo","Todo","connect","user","title","completed","className","name","onClick","API_URL","getData","url","a","fetch","response","json","getPreparedTodos","users","preparedTodos","map","find","person","userId","changeIsLoading","status","changeIsLoaded","changeTodos","todosFromApi","changeSelectedSort","sort","TodoList","showAllTodos","sortedTodos","useMemo","aTodo","bTodo","localeCompare","Number","value","onChange","event","typeOfSort","target","disabled","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc33e927.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { PreparedTodo } from '../constants_types/types';\nimport {\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_TODOS,\n  SET_SELECTED_SORT,\n  DELETE_TASK,\n} from '../constants_types/constants';\n\nexport interface State {\n  todos: PreparedTodo[] | [];\n  isLoading: boolean;\n  isLoaded: boolean;\n  selectedSort: string;\n}\n\nconst initialState: State = {\n  todos: [],\n  isLoading: false,\n  isLoaded: false,\n  selectedSort: 'choose',\n};\n\nfunction reducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case SET_SELECTED_SORT:\n      return {\n        ...state,\n        selectedSort: action.selectedSort,\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        todos: (state.todos as PreparedTodo[]).filter(todo => todo.id !== action.id),\n      };\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer);\n","\nexport const SET_IS_LOADING = 'SET_IS_LOADING';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_SELECTED_SORT = 'SET_SELECTED_SORT';\nexport const DELETE_TASK = 'DELETE_TASK';\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { PreparedTodo } from '../../constants_types/types';\nimport { deleteTask } from '../../redux/actionCreators';\n\nimport '../../App.css';\n\ninterface Props {\n  todo: PreparedTodo;\n  removeTodo: (id: number) => void;\n}\n\nexport const TodoTemplate: FC<Props> = ({ todo, removeTodo }) => {\n  const {\n    user,\n    title,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <tr>\n      {user && (<td className=\"table__cell\">{user.name}</td>)}\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell table__cell-completed\">\n        {completed ? 'Done' : 'Don\\'t do'}\n      </td>\n      <td className=\"table__cell\">\n        <button\n          type=\"button\"\n          className=\"deleted_button\"\n          onClick={() => removeTodo(id)}\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = {\n  removeTodo: deleteTask,\n};\n\nexport const Todo = connect(\n  null,\n  mapDispatchToProps,\n)(TodoTemplate);\n","import { PreparedTodo } from '../constants_types/types';\nimport {\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_TODOS,\n  SET_SELECTED_SORT,\n  DELETE_TASK,\n} from '../constants_types/constants';\n\nexport const setIsLoading = (status: boolean) => ({\n  type: SET_IS_LOADING,\n  isLoading: status,\n});\n\nexport const setIsLoaded = () => ({\n  type: SET_IS_LOADED,\n  isLoaded: true,\n});\n\nexport const setTodos = (todosFromApi: PreparedTodo[]) => ({\n  type: SET_TODOS,\n  todos: todosFromApi,\n});\n\nexport const deleteTask = (id: number) => ({\n  type: DELETE_TASK,\n  id,\n});\n\nexport const setSelectedSort = (sort: string) => ({\n  type: SET_SELECTED_SORT,\n  selectedSort: sort,\n});\n","import { User, Todo, PreparedTodo } from './constants_types/types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodo[]> => {\n  const todos = await getTodos();\n  const users = await getUsers();\n  const preparedTodos = todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }));\n\n  return preparedTodos;\n};\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { PreparedTodo } from '../../constants_types/types';\nimport { Todo } from '../Todo/Todo';\nimport { getPreparedTodos } from '../../helpers_api';\nimport { State } from '../../redux/store';\nimport {\n  setIsLoading,\n  setIsLoaded,\n  setTodos,\n  setSelectedSort,\n} from '../../redux/actionCreators';\n\n\ninterface StateProps {\n  todos: PreparedTodo[] | [];\n  isLoading: boolean;\n  isLoaded: boolean;\n  selectedSort: string;\n}\n\ninterface Methods {\n  changeTodos: (todosFromApi: PreparedTodo[]) => void;\n  changeIsLoading: (status: boolean) => void;\n  changeIsLoaded: () => void;\n  changeSelectedSort: (sort: string) => void;\n}\n\ntype Props = StateProps & Methods;\n\nexport const TodoListTemplate: FC<Props> = ({\n  isLoading,\n  changeIsLoading,\n  changeIsLoaded,\n  isLoaded,\n  todos,\n  changeTodos,\n  changeSelectedSort,\n  selectedSort,\n}) => {\n  const showAllTodos = async () => {\n    changeIsLoading(true);\n\n    const todosFromApi = await getPreparedTodos();\n\n    changeTodos(todosFromApi);\n    changeIsLoading(false);\n    changeIsLoaded();\n  };\n\n  const sortedBy = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value: typeOfSort } = event.target;\n\n    changeSelectedSort(typeOfSort);\n  };\n\n  const sortedTodos = useMemo(() => {\n    if (selectedSort === 'initial') {\n      return [...todos];\n    }\n\n    return [...todos].sort((aTodo, bTodo) => {\n      switch (selectedSort) {\n        case 'title':\n          return aTodo.title.localeCompare(bTodo.title);\n        case 'name':\n          return aTodo.user && bTodo.user ? aTodo.user.name.localeCompare(bTodo.user.name) : 0;\n        case 'completed':\n          return Number(aTodo.completed) - Number(bTodo.completed);\n        default:\n          return 0;\n      }\n    });\n  }, [todos, selectedSort]);\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n        Loading...\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {(!isLoaded ? (\n        <>\n          <p className=\"initual_loading\">\n            Load your Todos\n          </p>\n          <button\n            type=\"button\"\n            className=\"loading_button\"\n            onClick={showAllTodos}\n          >\n            Load\n          </button>\n        </>\n      )\n        : (\n          <>\n            <select\n              value={selectedSort}\n              onChange={sortedBy}\n              className=\"selected_button\"\n            >\n              <option disabled value=\"choose\">Choose sort method</option>\n              <option value=\"initial\">Initial view</option>\n              <option value=\"title\">Title</option>\n              <option value=\"name\">Name</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n            <table className=\"table\">\n              <thead>\n                <tr className=\"table__title\">\n                  <th className=\"table__cell\">User</th>\n                  <th className=\"table__cell\">Todo</th>\n                  <th className=\"table__cell\">Status</th>\n                  <th className=\"table__cell\">Delete</th>\n                </tr>\n              </thead>\n              <tbody>\n                <>\n                  {sortedTodos.map(todo => <Todo key={todo.id} todo={todo} />)}\n                </>\n              </tbody>\n            </table>\n          </>\n        )\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  todos: state.todos,\n  selectedSort: state.selectedSort,\n});\nconst mapDispatchToProps = {\n  changeIsLoading: setIsLoading,\n  changeIsLoaded: setIsLoaded,\n  changeTodos: setTodos,\n  changeSelectedSort: setSelectedSort,\n};\n\nexport const TodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoListTemplate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport './App.css';\n\nexport const App: FC = () => (\n  <Provider store={store}>\n    <TodoList />\n  </Provider>\n);\n"],"sourceRoot":""}