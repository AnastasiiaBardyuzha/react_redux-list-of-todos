{"version":3,"sources":["redux/store.ts","constants_types/constants.ts","components/Todo/Todo.tsx","redux/actionCreators.ts","helpers_api.ts","components/TodoList/TodoList.tsx","index.tsx","App.tsx"],"names":["initialState","todos","isLoading","isLoaded","selectedSort","store","createStore","state","action","type","filter","todo","id","Todo","connect","dispatch","removeTodo","deleteTask","user","title","completed","className","name","onClick","API_URL","getData","url","a","fetch","response","json","getPreparedTodos","users","preparedTodos","map","find","person","userId","TodoList","setIsLoading","status","setIsLoaded","setTodos","todosFromApi","setSelectedSort","sort","showAllTodos","sortedTodos","useMemo","aTodo","bTodo","localeCompare","Number","value","onChange","event","typeOfSort","target","disabled","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bfb54cd.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { PreparedTodo } from '../constants_types/types';\nimport { SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_TODOS,\n  SET_SELECTED_SORT,\n  DELETE_TASK } from '../constants_types/constants';\n\nexport interface State {\n  todos: PreparedTodo[] | []\n  isLoading: boolean\n  isLoaded: boolean\n  selectedSort: string\n}\n\nconst initialState: State = {\n  todos: [],\n  isLoading: false,\n  isLoaded: false,\n  selectedSort: 'choose',\n}\n\nfunction reducer(state = initialState, action: AnyAction) {\n  switch(action.type) {\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading\n      }\n    case SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded\n      }\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.todos\n      }\n    case SET_SELECTED_SORT:\n      return {\n        ...state,\n        selectedSort: action.selectedSort\n      }\n   case DELETE_TASK:\n    return {\n      ...state,\n      todos: (state.todos as PreparedTodo[]).filter(todo => todo.id !== action.id)\n    }\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","\nexport const SET_IS_LOADING = 'SET_IS_LOADING';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SET_SELECTED_SORT = 'SET_SELECTED_SORT';\nexport const DELETE_TASK = 'DELETE_TASK';\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { PreparedTodo } from '../../constants_types/types';\nimport { deleteTask } from '../../redux/actionCreators';\n\nimport '../../App.css';\n\ninterface Props {\n  todo: PreparedTodo\n  removeTodo: (id: number) => void\n}\n\nexport const TodoTemplate: FC<Props> = ({ todo, removeTodo }) => {\n  const { user, title, completed, id } = todo;\n\n  return (\n    <tr>\n      {user && (<td className=\"table__cell\">{user.name}</td>)}\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell table__cell-completed\">\n        {completed ? 'Done' : 'Don\\'t do'}\n      </td>\n      <td className=\"table__cell\">\n        <button\n          type=\"button\"\n          className=\"deleted_button\"\n          onClick={() => removeTodo(id)}\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    removeTodo: (id: number) => dispatch(deleteTask(id))\n  }\n}\n\nexport const Todo = connect(\n  null,\n  mapDispatchToProps,\n)(TodoTemplate)\n","import { PreparedTodo } from '../constants_types/types';\nimport { SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_TODOS,\n  SET_SELECTED_SORT,\n  DELETE_TASK } from '../constants_types/constants';\n\nexport const setIsLoading = (status: boolean) => ({\n  type: SET_IS_LOADING,\n  isLoading: status,\n});\n\nexport const setIsLoaded = () => ({\n  type: SET_IS_LOADED,\n  isLoaded: true,\n});\n\nexport const setTodos = (todosFromApi: PreparedTodo[]) => ({\n  type: SET_TODOS,\n  todos: todosFromApi,\n});\n\nexport const deleteTask = (id: number) => ({\n  type: DELETE_TASK,\n  id: id,\n});\n\nexport const setSelectedSort = (sort: string) => ({\n  type: SET_SELECTED_SORT,\n  selectedSort: sort,\n});\n","import { User, Todo, PreparedTodo } from './constants_types/types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodo[]> => {\n  const todos = await getTodos();\n  const users = await getUsers();\n  const preparedTodos = todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }));\n  return preparedTodos;\n};\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { PreparedTodo } from '../../constants_types/types';\nimport { Todo } from '../Todo/Todo';\nimport { getPreparedTodos } from '../../helpers_api';\nimport { State } from '../../redux/store';\nimport { setIsLoading, setIsLoaded, setTodos, setSelectedSort } from '../../redux/actionCreators';\n\n\ninterface StateProps {\n  todos: PreparedTodo[] | []\n  isLoading: boolean\n  isLoaded: boolean\n  selectedSort: string\n}\n\ninterface Methods {\n  setTodos: (todosFromApi: PreparedTodo[]) => void;\n  setIsLoading: (status: boolean) => void;\n  setIsLoaded: () => void;\n  setSelectedSort: (sort: string) => void;\n}\n\ntype Props = StateProps & Methods;\n\nexport const TodoListTemplate: FC<Props> = ({\n  isLoading,\n  setIsLoading,\n  setIsLoaded,\n  isLoaded,\n  todos,\n  setTodos,\n  setSelectedSort,\n  selectedSort\n}) => {\n\n  const showAllTodos = async () => {\n    setIsLoading(true);\n\n    const todosFromApi = await getPreparedTodos();\n\n    setTodos(todosFromApi);\n    setIsLoading(false);\n    setIsLoaded();\n  }\n\n  const sortedBy = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value: typeOfSort } = event.target;\n    setSelectedSort(typeOfSort);\n  }\n\n  const sortedTodos = useMemo(() => {\n    return selectedSort === 'initial'\n        ? [...todos]\n        : [...todos].sort((aTodo, bTodo) => {\n          switch(selectedSort) {\n            case 'title':\n              return aTodo.title.localeCompare(bTodo.title);\n            case 'name':\n              return aTodo.user && bTodo.user ? aTodo.user.name.localeCompare(bTodo.user.name) : 0;\n            case 'completed':\n              return Number(aTodo.completed) - Number(bTodo.completed);\n            default:\n            return 0;\n          }\n        })\n\n  }, [todos, selectedSort]);\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n        Loading...\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {(!isLoaded ? (\n          <>\n            <p className=\"initual_loading\">\n              Load your Todos\n            </p>\n            <button\n              type=\"button\"\n              className=\"loading_button\"\n              onClick={showAllTodos}\n            >\n              Load\n            </button>\n          </>\n         )\n        : (\n          <>\n            <select value={selectedSort}\n              onChange={sortedBy}\n              className=\"selected_button\"\n            >\n              <option disabled value='choose'>Choose sort method</option>\n              <option value='initial'>Initial view</option>\n              <option value='title'>Title</option>\n              <option value='name'>Name</option>\n              <option value='completed'>Completed</option>\n            </select>\n            <table className=\"table\">\n              <thead>\n                <tr className=\"table__title\">\n                  <th className=\"table__cell\">User</th>\n                  <th className=\"table__cell\">Todo</th>\n                  <th className=\"table__cell\">Status</th>\n                  <th className=\"table__cell\">Delete</th>\n                </tr>\n              </thead>\n              <tbody>\n              <>\n                {sortedTodos.map(todo => <Todo key={todo.id} todo={todo} />)}\n              </>\n              </tbody>\n            </table>\n          </>\n        )\n      )}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: State) => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  todos: state.todos,\n  selectedSort: state.selectedSort\n});\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setIsLoading: (status: boolean) => dispatch(setIsLoading(status)),\n    setIsLoaded: () => dispatch(setIsLoaded()),\n    setTodos: (todosFromApi: PreparedTodo[]) => dispatch(setTodos(todosFromApi)),\n    setSelectedSort: (sort: string) => dispatch(setSelectedSort(sort))\n  }\n};\n\nexport const TodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoListTemplate)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport './App.css';\n\nexport const App: FC = () => (\n  <Provider store={store}>\n    <TodoList />\n  </Provider>\n);\n"],"sourceRoot":""}