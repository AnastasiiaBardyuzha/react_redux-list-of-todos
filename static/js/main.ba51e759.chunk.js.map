{"version":3,"sources":["store.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","helpers_api.ts","Todos.tsx","index.tsx","App.tsx"],"names":["initualState","todos","isLoading","isLoaded","selectedSort","store","createStore","state","action","type","Todo","todo","user","title","completed","className","name","TodoList","todosList","map","key","id","API_URL","getData","url","a","fetch","response","json","getPreparedTodos","users","preparedTodos","find","person","userId","Todos","connect","dispatch","setIsLoading","status","setIsLoaded","setTodos","todosFromApi","setSelectedSort","sort","showedAllTodos","sortedTodos","useMemo","aTodo","bTodo","localeCompare","Number","value","onChange","event","typeOfSort","target","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba51e759.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { PreparedTodo } from './types';\n\nexport interface State {\n  todos: PreparedTodo[] | []\n  isLoading: boolean\n  isLoaded: boolean\n  selectedSort: string\n}\n\nconst initualState: State = {\n  todos: [],\n  isLoading: false,\n  isLoaded: false,\n  selectedSort: 'choose',\n}\n\nfunction reduser(state = initualState, action: AnyAction) {\n  switch(action.type) {\n    case 'SET_IS_LOADING':\n      return { ...state,\n      isLoading: action.isLoading}\n    case 'SET_IS_LOADED':\n      return { ...state,\n      isLoaded: action.isLoaded}\n    case 'SET_TODOS':\n      return { ...state,\n      todos: action.todos}\n    case 'SET_SELECTED_SORT':\n      return { ...state,\n      selectedSort: action.selectedSort}\n      default:\n      return state;\n  }\n};\n\nexport const store = createStore(reduser);\n","import React, { FC } from 'react';\nimport { PreparedTodo } from '../../types';\n\nimport '../../App.css';\n\ninterface Props {\n  todo: PreparedTodo\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const { user, title, completed } = todo;\n\n  return (\n    <tr>\n      {user && (<td className=\"table__cell\">{user.name}</td>)}\n      <td className=\"table__cell table__cell\">{title}</td>\n      <td className=\"table__cell table__cell-completed\">{completed ? 'Done' : 'Don\\'t do'}</td>\n    </tr>\n  );\n}\n","import React, { FC } from 'react';\nimport { PreparedTodo } from '../../types';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todosList: PreparedTodo[]\n}\n\nexport const TodoList: FC<Props> = ({ todosList }) => (\n  <>\n    {todosList.map(todo => <Todo key={todo.id} todo={todo} />)}\n  </>\n);\n","import { User, Todo, PreparedTodo } from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n\nexport const getPreparedTodos = async (): Promise<PreparedTodo[]> => {\n  const todos: Todo[] = await getTodos();\n  const users: User[] = await getUsers();\n  const preparedTodos: PreparedTodo[] = todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId),\n  }));\n  return preparedTodos;\n};\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { PreparedTodo } from './types';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { getPreparedTodos } from './helpers_api';\nimport { State } from './store';\n\n\ninterface StateProps {\n  todos: PreparedTodo[] | []\n  isLoading: boolean\n  isLoaded: boolean\n  selectedSort: string\n}\n\ninterface Methods {\n  setTodos: (todosFromApi: PreparedTodo[]) => void;\n  setIsLoading: (status: boolean) => void;\n  setIsLoaded: () => void;\n  setSelectedSort: (sort: string) => void;\n}\n\ntype Props = StateProps & Methods;\n\nexport const TodosTemplate: FC<Props> = ({\n  isLoading,\n  setIsLoading,\n  setIsLoaded,\n  isLoaded,\n  todos,\n  setTodos,\n  setSelectedSort,\n  selectedSort\n}) => {\n\n  const showedAllTodos = async () => {\n    setIsLoading(true);\n\n    const todosFromApi = await getPreparedTodos();\n\n    setTodos(todosFromApi);\n    setIsLoading(false);\n    setIsLoaded();\n  }\n\n  const sorted = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value: typeOfSort } = event.target;\n    setSelectedSort(typeOfSort);\n  }\n\n  const sortedTodos = useMemo(() => {\n    return selectedSort === 'initual'\n        ? [...todos]\n        : [...todos].sort((aTodo, bTodo) => {\n          switch(selectedSort) {\n            case 'title':\n              return aTodo.title.localeCompare(bTodo.title);\n            case 'name':\n              return aTodo.user && bTodo.user ? aTodo.user.name.localeCompare(bTodo.user.name) : 0;\n            case 'completed':\n              return Number(aTodo.completed) - Number(bTodo.completed);\n            default:\n            return 0;\n          }\n        })\n\n  }, [todos, selectedSort]);\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n      Loading...\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      {(\n        !isLoaded\n        ? (\n            <>\n              <p className=\"initual_loading\">\n                Load your Todos\n              </p>\n              <button\n                type=\"button\"\n                className=\"loading_button\"\n                onClick={showedAllTodos}\n              >\n                Load\n              </button>\n            </>\n           )\n          : (\n            <>\n              <select value={selectedSort}\n                onChange={sorted}\n                className=\"selected_button\"\n              >\n                <option disabled value='choose'>Choose sort method</option>\n                <option value='initual'>Initual view</option>\n                <option value='title'>Title</option>\n                <option value='name'>Name</option>\n                <option value='completed'>Completed</option>\n              </select>\n              <table className=\"table\">\n                <thead>\n                  <tr className=\"table__title\">\n                    <th className=\"table__cell\">User</th>\n                    <th className=\"table__cell\">Todo</th>\n                    <th className=\"table__cell\">Status</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <TodoList todosList={sortedTodos} />\n                </tbody>\n              </table>\n            </>\n          )\n        )}\n      </div>\n    )\n}\n\nconst mapStateToProps = (state: State) => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  todos: state.todos,\n  selectedSort: state.selectedSort\n});\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setIsLoading: (status: boolean) => dispatch({ type: 'SET_IS_LOADING', isLoading: status }),\n    setIsLoaded: () => dispatch({ type: 'SET_IS_LOADED', isLoaded: true }),\n    setTodos: (todosFromApi: PreparedTodo[]) => dispatch({ type: 'SET_TODOS', todos: todosFromApi }),\n    setSelectedSort: (sort: string) => dispatch({ type: 'SET_SELECTED_SORT', selectedSort: sort })\n  }\n};\n\nexport const Todos = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodosTemplate)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport { Todos } from './Todos';\n\nimport './App.css';\n\nexport const App: FC = () => (\n  <Provider store={store}>\n    <Todos />\n  </Provider>\n);\n"],"sourceRoot":""}